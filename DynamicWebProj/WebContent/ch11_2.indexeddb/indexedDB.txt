사용자의 브라우저에 데이터를 영구적으로 저장할 수 있는 방법 중 하나이다. 
IndexedDB를 사용하여 
네트워크 상태에 상관없이 풍부한 쿼리 기능을 이용할 수 있는 
웹 어플리케이션을 만들 수 있기 때문에, 
웹 어플리케이션은 온라인과 오프라인 환경에서 모두 동작할 수 있다.


Indexed Database는 새로 등장한 또다른 로컬 저장소 스펙이다
2009년 말까지 사양 책정이 진행중이던 Web SQL Database 의 대안으로 탄생했다
즉 현재 Web SQL Database 는 사양 책정이 중지된 상태이며, IndexedDB 라는 새로운 스펙이 
대안으로 떠오르고 있는 것이다

Indexed Database 는 자바스크립트 객체 단위의 데이터 저장이 용이하고 그 객체를 대상으로 
인덱스를 걸 수 있어 간단한 구현과 효율적인 검색을 수행할 수 있다

관계형 데이타베이스의 경우 저장되는 데이터의 스키마의 유연성이 떨어질 수 있고 SQL 이라는 별도의 독립된 언어를 기반으로 하기 때문에 브라우저간 표준화및 호환성에 문제될 소지가 있다
(MS SQL과 오라클이 자체 비표준 SQL을 지원하는 것처럼 변형된 SQL이 발생할 수 있다는 것이다)

반면 Indexed Database 는 SQL 언어와는 무관하며 단순한 저장구조(Key-Value Storage)를 갖추고 있으며 간단한 자바스크립트 API 만으로도 데이터베이스 조작이 가능하여 보다 브라우저 친화적이고 표준화 작업을 쉽게 이끌 수 있다는 장점이 있다

결국 고가용성 환경이 아닌, 모바일 환경에서의 가벼운 로컬DB 컨셉은 관계형DB보다는 
Indexed Database와 같은 객체기반의 비관계형 DB가 더 어울린다고 할 수 있겠다

앞서 파이어폭스와 IE9 브라우저가 Web SQL Database 를 지원하지 않는다고 하였는데,
그 이유가 바로 이들 브라우저에서는 Indexed Database 를 지원하는 것으로 방향을 잡았기 때문이다





IndexedDB가 권장하는 기본 패턴은 다음과 같습니다:

1. 데이터베이스를 엽니다.
2. 객체 저장소(Object store)를 생성합니다. 
3. 트랜젝션(Transaction)을 시작하고, 데이터를 추가하거나 읽어들이는 등의 데이터베이스 작업을 요청합니다.
4. DOM 이벤트 리스너를 사용하여 요청이 완료될때까지 기다립니다.
5. (요청 객체에서 찾을 수 있는) 결과를 가지고 무언가를 합니다.
